using System;
using System.Collections.Generic;
using System.Linq;

namespace LeetCodeExercises
{
    class Program
    {
        static void Main(string[] args)
        {
            var heroHp = new Dictionary<string, int>();
            var heroMp = new Dictionary<string, int>();


            int n = int.Parse(Console.ReadLine());
            for (int i = 0; i < n; i++)
            {
                string[] info = Console.ReadLine().Split(" ");
                string heroName = info[0];
                int hp = int.Parse(info[1]);
                int mp = int.Parse(info[2]);

                heroHp.Add(heroName, hp);
                heroMp.Add(heroName, mp);
            }

            string command = Console.ReadLine();

            while (command != "End")
            {
                string[] splitted = command.Split(" - ");
                if (splitted[0] == "CastSpell")
                {
                    string heroName = splitted[1];
                    int mpNeeded = int.Parse(splitted[2]);
                    string spellName = splitted[3];
                    if (heroMp[heroName] >= mpNeeded)
                    {
                        int manaLeft = heroMp[heroName] - mpNeeded;
                        heroMp[heroName] -= mpNeeded;
                        Console.WriteLine($"{heroName} has successfully cast {spellName} and now has {manaLeft} MP!");
                    }
                    else
                    {
                        Console.WriteLine($"{heroName} does not have enough MP to cast {spellName}!");
                    }
                }
                else if (splitted[0] == "TakeDamage")
                {
                    string heroName = splitted[1];
                    int damage = int.Parse(splitted[2]);
                    string attacker = splitted[3];

                    if (heroHp[heroName] > damage)
                    {
                        int hpLeft = heroHp[heroName] - damage;
                        heroHp[heroName] -= damage;
                        Console.WriteLine($"{heroName} was hit for {damage} HP by {attacker} and now has {hpLeft} HP left!");
                    }
                    else
                    {
                        heroHp.Remove(heroName);
                        heroMp.Remove(heroName);
                        Console.WriteLine($"{heroName} has been killed by {attacker}!");
                    }
                }
                else if (splitted[0] == "Recharge")
                {
                    string heroName = splitted[1];
                    int amount = int.Parse(splitted[2]);
                    int healAmount = 0;
                    healAmount = 200 - heroMp[heroName];

                    heroMp[heroName] += amount;
                    if(heroMp[heroName] > 200)
                    {
                        heroMp[heroName] = 200;
                        Console.WriteLine($"{heroName} recharged for {healAmount} MP!");
                    }
                    else
                    {
                        Console.WriteLine($"{heroName} recharged for {amount} MP!");
                    }
                }
                else if (splitted[0] == "Heal")
                {
                    string heroName = splitted[1];
                    int amount = int.Parse(splitted[2]);
                    int healAmount = 0;
                    healAmount = 100 - heroHp[heroName];

                    heroHp[heroName] += amount;
                    if (heroHp[heroName] > 100)
                    {
                        heroHp[heroName] = 100;
                        Console.WriteLine($"{heroName} healed for {healAmount} HP!");
                    }
                    else
                    {
                        Console.WriteLine($"{heroName} healed for {amount} HP!");
                    }
                }
                command = Console.ReadLine();
            }
            /*heroHp = heroHp
                .Where(h => h.Value > 0)
                .OrderByDescending(h => h.Value)
                .ThenBy(h => h.Key)
                .ToDictionary(h => h.Key, h => h.Value);*/
            foreach (var hero in heroHp)
            {
                Console.WriteLine(hero.Key);
                Console.WriteLine($"  HP: {hero.Value}");
                Console.WriteLine($"  MP: {heroMp[hero.Key]}");
            }
        }
    }
}
